#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pemi.Esoda.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="eSoda")]
	public partial class ESodaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCentralRegistryType(CentralRegistryType instance);
    partial void UpdateCentralRegistryType(CentralRegistryType instance);
    partial void DeleteCentralRegistryType(CentralRegistryType instance);
    partial void InsertCentralRegistry(CentralRegistry instance);
    partial void UpdateCentralRegistry(CentralRegistry instance);
    partial void DeleteCentralRegistry(CentralRegistry instance);
    #endregion
		
		public ESodaDataContext() : 
				base(global::Pemi.Esoda.DataAccess.Properties.Settings.Default.eSodaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ESodaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESodaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESodaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESodaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cases> Cases
		{
			get
			{
				return this.GetTable<Cases>();
			}
		}
		
		public System.Data.Linq.Table<CentralRegistryType> CentralRegistryTypes
		{
			get
			{
				return this.GetTable<CentralRegistryType>();
			}
		}
		
		public System.Data.Linq.Table<DataForCentralRegistry> DataForCentralRegistries
		{
			get
			{
				return this.GetTable<DataForCentralRegistry>();
			}
		}
		
		public System.Data.Linq.Table<CentralRegistry> CentralRegistries
		{
			get
			{
				return this.GetTable<CentralRegistry>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Rejestry.GetDataForCentralRegistry")]
		public ISingleResult<DataForCentralRegistry> GetDataForCentralRegistry([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> documentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), documentID);
			return ((ISingleResult<DataForCentralRegistry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Uzytkownicy.IdWydzialu", IsComposable=true)]
		public System.Nullable<int> GetOrganizationalUnitID([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> idTozsamosci)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idTozsamosci).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Sprawy.vListaSpraw")]
	public partial class Cases
	{
		
		private int _ID;
		
		private string _Prefix;
		
		private string _Suffix;
		
		private short _Year;
		
		private string _Title;
		
		private string _OrganizationalUnit;
		
		private System.Xml.Linq.XElement _CaseTypes;
		
		private bool _IsActive;
		
		private bool _IsArchive;
		
		public Cases()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this._Prefix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this._Suffix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt NOT NULL")]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationalUnit", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string OrganizationalUnit
		{
			get
			{
				return this._OrganizationalUnit;
			}
			set
			{
				if ((this._OrganizationalUnit != value))
				{
					this._OrganizationalUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseTypes", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement CaseTypes
		{
			get
			{
				return this._CaseTypes;
			}
			set
			{
				if ((this._CaseTypes != value))
				{
					this._CaseTypes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsArchive", DbType="Bit NOT NULL")]
		public bool IsArchive
		{
			get
			{
				return this._IsArchive;
			}
			set
			{
				if ((this._IsArchive != value))
				{
					this._IsArchive = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Rejestry.RodzajRejestruCentralnego")]
	public partial class CentralRegistryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RegistryName;
		
		private EntitySet<CentralRegistry> _CentralRegistries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRegistryNameChanging(string value);
    partial void OnRegistryNameChanged();
    #endregion
		
		public CentralRegistryType()
		{
			this._CentralRegistries = new EntitySet<CentralRegistry>(new Action<CentralRegistry>(this.attach_CentralRegistries), new Action<CentralRegistry>(this.detach_CentralRegistries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistryName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RegistryName
		{
			get
			{
				return this._RegistryName;
			}
			set
			{
				if ((this._RegistryName != value))
				{
					this.OnRegistryNameChanging(value);
					this.SendPropertyChanging();
					this._RegistryName = value;
					this.SendPropertyChanged("RegistryName");
					this.OnRegistryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CentralRegistryType_CentralRegistry", Storage="_CentralRegistries", ThisKey="ID", OtherKey="RegistryTypeID")]
		public EntitySet<CentralRegistry> CentralRegistries
		{
			get
			{
				return this._CentralRegistries;
			}
			set
			{
				this._CentralRegistries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CentralRegistries(CentralRegistry entity)
		{
			this.SendPropertyChanging();
			entity.CentralRegistryType = this;
		}
		
		private void detach_CentralRegistries(CentralRegistry entity)
		{
			this.SendPropertyChanging();
			entity.CentralRegistryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class DataForCentralRegistry
	{
		
		private string _OrganizationalUnit;
		
		private string _ItemDate;
		
		private string _ItemReferenceNumber;
		
		public DataForCentralRegistry()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationalUnit", DbType="varchar(100)", CanBeNull=false)]
		public string OrganizationalUnit
		{
			get
			{
				return this._OrganizationalUnit;
			}
			set
			{
				if ((this._OrganizationalUnit != value))
				{
					this._OrganizationalUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDate", DbType="varchar(10)", CanBeNull=false)]
		public string ItemDate
		{
			get
			{
				return this._ItemDate;
			}
			set
			{
				if ((this._ItemDate != value))
				{
					this._ItemDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemReferenceNumber", DbType="varchar(100)", CanBeNull=false)]
		public string ItemReferenceNumber
		{
			get
			{
				return this._ItemReferenceNumber;
			}
			set
			{
				if ((this._ItemReferenceNumber != value))
				{
					this._ItemReferenceNumber = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Rejestry.RejestrCentralny")]
	public partial class CentralRegistry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RegistryYear;
		
		private int _RegistryTypeID;
		
		private System.Nullable<int> _DocumentID;
		
		private int _PositionNumber;
		
		private System.Nullable<System.DateTime> _ItemDate;
		
		private string _ItemReferenceNumber;
		
		private string _ItemSide;
		
		private string _ItemSubject;
		
		private string _OrganizationalUnit;
		
		private string _Remarks;
		
		private System.DateTime _EntryDate = default(System.DateTime);
		
		private EntityRef<CentralRegistryType> _CentralRegistryType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRegistryYearChanging(int value);
    partial void OnRegistryYearChanged();
    partial void OnRegistryTypeIDChanging(int value);
    partial void OnRegistryTypeIDChanged();
    partial void OnDocumentIDChanging(System.Nullable<int> value);
    partial void OnDocumentIDChanged();
    partial void OnPositionNumberChanging(int value);
    partial void OnPositionNumberChanged();
    partial void OnItemDateChanging(System.Nullable<System.DateTime> value);
    partial void OnItemDateChanged();
    partial void OnItemReferenceNumberChanging(string value);
    partial void OnItemReferenceNumberChanged();
    partial void OnItemSideChanging(string value);
    partial void OnItemSideChanged();
    partial void OnItemSubjectChanging(string value);
    partial void OnItemSubjectChanged();
    partial void OnOrganizationalUnitChanging(string value);
    partial void OnOrganizationalUnitChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public CentralRegistry()
		{
			this._CentralRegistryType = default(EntityRef<CentralRegistryType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistryYear", DbType="Int NOT NULL")]
		public int RegistryYear
		{
			get
			{
				return this._RegistryYear;
			}
			set
			{
				if ((this._RegistryYear != value))
				{
					this.OnRegistryYearChanging(value);
					this.SendPropertyChanging();
					this._RegistryYear = value;
					this.SendPropertyChanged("RegistryYear");
					this.OnRegistryYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistryTypeID", DbType="Int NOT NULL")]
		public int RegistryTypeID
		{
			get
			{
				return this._RegistryTypeID;
			}
			set
			{
				if ((this._RegistryTypeID != value))
				{
					if (this._CentralRegistryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RegistryTypeID = value;
					this.SendPropertyChanged("RegistryTypeID");
					this.OnRegistryTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int")]
		public System.Nullable<int> DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionNumber", DbType="Int NOT NULL")]
		public int PositionNumber
		{
			get
			{
				return this._PositionNumber;
			}
			set
			{
				if ((this._PositionNumber != value))
				{
					this.OnPositionNumberChanging(value);
					this.SendPropertyChanging();
					this._PositionNumber = value;
					this.SendPropertyChanged("PositionNumber");
					this.OnPositionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ItemDate
		{
			get
			{
				return this._ItemDate;
			}
			set
			{
				if ((this._ItemDate != value))
				{
					this.OnItemDateChanging(value);
					this.SendPropertyChanging();
					this._ItemDate = value;
					this.SendPropertyChanged("ItemDate");
					this.OnItemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemReferenceNumber", DbType="VarChar(50)")]
		public string ItemReferenceNumber
		{
			get
			{
				return this._ItemReferenceNumber;
			}
			set
			{
				if ((this._ItemReferenceNumber != value))
				{
					this.OnItemReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._ItemReferenceNumber = value;
					this.SendPropertyChanged("ItemReferenceNumber");
					this.OnItemReferenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSide", DbType="VarChar(200)")]
		public string ItemSide
		{
			get
			{
				return this._ItemSide;
			}
			set
			{
				if ((this._ItemSide != value))
				{
					this.OnItemSideChanging(value);
					this.SendPropertyChanging();
					this._ItemSide = value;
					this.SendPropertyChanged("ItemSide");
					this.OnItemSideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSubject", DbType="VarChar(500)")]
		public string ItemSubject
		{
			get
			{
				return this._ItemSubject;
			}
			set
			{
				if ((this._ItemSubject != value))
				{
					this.OnItemSubjectChanging(value);
					this.SendPropertyChanging();
					this._ItemSubject = value;
					this.SendPropertyChanged("ItemSubject");
					this.OnItemSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationalUnit", DbType="VarChar(200)")]
		public string OrganizationalUnit
		{
			get
			{
				return this._OrganizationalUnit;
			}
			set
			{
				if ((this._OrganizationalUnit != value))
				{
					this.OnOrganizationalUnitChanging(value);
					this.SendPropertyChanging();
					this._OrganizationalUnit = value;
					this.SendPropertyChanged("OrganizationalUnit");
					this.OnOrganizationalUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(200)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CentralRegistryType_CentralRegistry", Storage="_CentralRegistryType", ThisKey="RegistryTypeID", OtherKey="ID", IsForeignKey=true)]
		public CentralRegistryType CentralRegistryType
		{
			get
			{
				return this._CentralRegistryType.Entity;
			}
			set
			{
				CentralRegistryType previousValue = this._CentralRegistryType.Entity;
				if (((previousValue != value) 
							|| (this._CentralRegistryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CentralRegistryType.Entity = null;
						previousValue.CentralRegistries.Remove(this);
					}
					this._CentralRegistryType.Entity = value;
					if ((value != null))
					{
						value.CentralRegistries.Add(this);
						this._RegistryTypeID = value.ID;
					}
					else
					{
						this._RegistryTypeID = default(int);
					}
					this.SendPropertyChanged("CentralRegistryType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
